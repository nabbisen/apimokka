name: npm

on:
  release:
    types: [created]
  # todo: temporary push trigger for dev
  # push

permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  PRODUCT_BASENAME: apimokka
  TAG: ${{ github.ref_name }}            # tag or branch name
  JOB_WORKDIR: tmp-${{ github.run_id }}  # unique number

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Linux-x64-gnu
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive_ext: .tar.gz
            napiplatform: linux-x64-gnu
          - name: macOS-aarch64
            target: aarch64-apple-darwin
            os: macos-latest
            archive_ext: .zip
            napiplatform: darwin-arm64
          - name: Windows-x64
            target: x86_64-pc-windows-msvc
            os: windows-latest
            archive_ext: .zip
            napiplatform: win32-x64-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # [ fltk build preparation ]
      - name: Install fltk-rs requirements on Linux
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libpango1.0-dev libgl1-mesa-dev libglu1-mesa-dev
      
      # [ Node.js dependencies ]
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
      
      - name: Prepare napi
        run: cp -r napi/* .
        # replace w/
        # working-directory: napi
      
      - name: Install npm packages
        run: npm run install
      
      # [ build ]
      - name: Install Rust
        run: bash .github/workflows/scripts/install-rust.sh stable ${{ matrix.target }}
      
      - name: Cache cargo dependencies and build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Rust executable
        run: |
          npm run build

      # [ release asset ]
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: ${{ env.PRODUCT_BASENAME }}.*.node
          if-no-files-found: error
      
      # - name: Prepare for release asset
      #   run: |
      #     BUILT_FILEPATH=${{ env.PRODUCT_BASENAME }}.${{ matrix.napiplatform }}.node
      #     RELEASE_ASSET_BASENAME=${{ env.PRODUCT_BASENAME }}@${{ matrix.name }}-${{ env.TAG }}
      #     RELEASE_SRC_DIR=${RELEASE_ASSET_BASENAME}
      #     RELEASE_ASSET_FILENAME=${RELEASE_ASSET_BASENAME}${{ matrix.archive_ext }}
          
      #     mkdir -p "${{ env.JOB_WORKDIR }}/${RELEASE_SRC_DIR}"
          
      #     mv "${BUILT_FILEPATH}" "${{ env.JOB_WORKDIR }}/${RELEASE_SRC_DIR}/"
      #     mv "index.js" "${{ env.JOB_WORKDIR }}/${RELEASE_SRC_DIR}/"
      #     mv "index.d.ts" "${{ env.JOB_WORKDIR }}/${RELEASE_SRC_DIR}/"
      #     mv "run-built-package.js" "${{ env.JOB_WORKDIR }}/${RELEASE_SRC_DIR}/"
      #     mv "package.json" "${{ env.JOB_WORKDIR }}/${RELEASE_SRC_DIR}/"

      #     echo "RELEASE_SRC_DIR=${RELEASE_SRC_DIR}" >> $GITHUB_ENV
      #     echo "RELEASE_ASSET_FILENAME=${RELEASE_ASSET_FILENAME}" >> $GITHUB_ENV

      # # BSD tar on macOS: first 8MB of the file are sometimes all NUL byte
      # # refs: https://github.com/actions/cache/issues/403 , https://github.com/rust-lang/cargo/issues/8603
      # - name: Mitigate macOS tar bug
      #   if: matrix.target == 'aarch64-apple-darwin'
      #   run: |
      #     sudo /usr/sbin/purge
      
      # - name: Create archive as release asset - Linux
      #   if: >
      #     matrix.target != 'aarch64-apple-darwin' &&
      #     matrix.target != 'x86_64-pc-windows-msvc'
      #   run: |
      #     cd "${{ env.JOB_WORKDIR }}"
      #     tar czf "../${RELEASE_ASSET_FILENAME}" "${RELEASE_SRC_DIR}"
      
      # - name: Create archive as release asset - Windows / macOS
      #   if: >
      #     matrix.target == 'aarch64-apple-darwin' ||
      #     matrix.target == 'x86_64-pc-windows-msvc'
      #   run: |
      #     cd "${{ env.JOB_WORKDIR }}"
      #     7z a "../${RELEASE_ASSET_FILENAME}" "${RELEASE_SRC_DIR}"
      
      # - name: Update release with new asset
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: gh release upload ${{ github.ref_name }} ${RELEASE_ASSET_FILENAME}
 
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
      
      - name: Install dependencies
        run: npm run install
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Move artifacts
        run: npm run artifacts
      
      - name: List packages
        run: ls -R ./npm
        shell: bash
      
      # - name: Publish
      #   run: |
      #     npm config set provenance true
      #     if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
      #     then
      #       echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      #       npm publish --access public
      #     elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
      #     then
      #       echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      #       npm publish --tag next --access public
      #     else
      #       echo "Not a release, skipping publish"
      #     fi
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
